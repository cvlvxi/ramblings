(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d22b920"],{f011:function(e,s,t){"use strict";t.r(s);var a=function(){var e=this,s=e.$createElement;e._self._c;return e._m(0)},r=[function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("section",[t("ul",[t("li",[t("a",{attrs:{href:"#Problem:Settingbreakpoints"}},[e._v("Problem: Setting breakpoints")])]),t("li",[t("a",{attrs:{href:"#Problem:Seelocalvariables"}},[e._v("Problem: See local variables")]),t("ul",[t("li",[t("a",{attrs:{href:"#Printingwithpo"}},[e._v("Printing with po")])])])]),t("li",[t("a",{attrs:{href:"#Problem:Amoreuserfriendlyinterfacegui"}},[e._v("Problem: A more user friendly interface "),t("code",{pre:!0},[e._v("gui")])])]),t("li",[t("a",{attrs:{href:"#Problem:IneedmoreinfoVoltron:Viewstackregisters"}},[e._v("Problem: I need more info! (Voltron: View stack, registers)")])]),t("li",[t("a",{attrs:{href:"#Problem:AccesstoLLDBspythonapi"}},[e._v("Problem: Access to LLDB's python api")])]),t("li",[t("a",{attrs:{href:"#Problem:IwanttouseVSCODEwithlldb"}},[e._v("Problem: I want to use VSCODE with lldb")])]),t("li",[t("a",{attrs:{href:"#Links"}},[e._v("Links")])])]),t("h1",[e._v("LLDB")]),t("p",[e._v("Debugging is an essential activity when programming. If LLcoolJ was a programmer, he would potentially use something like "),t("code",{pre:!0},[e._v("gdb")]),e._v(" or in as the title of this piece reveals... "),t("code",{pre:!0},[e._v("lldb")]),e._v(".")]),t("img",{attrs:{src:"https://i.imgur.com/Oz0z3J1.png"}}),t("p",[t("em",[e._v("A happy llcoolj after figuring out the problem with lldb")])]),t("p",[e._v("So let's explore a real life example and use cases of lldb such that if LLCoolJ in this universe or another were a programmer he would know what are the tips & tricks of the trade.")]),t("h2",[t("a",{attrs:{name:"Problem:Settingbreakpoints"}}),e._v("Problem: Setting breakpoints")]),t("p",[e._v("Firstly remember to compile your code with -g for symbols or in Cmake you can do this with setting this in your CmakeLists.txt: "),t("code",{pre:!0},[e._v("set(CMAKE_BUILD_TYPE Debug)")])]),t("p",[e._v("Then you can specify a file:linenumber to break on")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("(lldb) b 203\nBreakpoint 1: "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("where")]),e._v(" = example`::render_frame() + 29 at main.cpp:203:25, address = 0x00000001000029bd\n(lldb) \n")])]),t("p",[e._v("Then call run")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("r\nProcess 18563 stopped\n* thread "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("#1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1")]),e._v("\n    frame "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("#0: 0x00000001000029bd example`::render_frame() at main.cpp:203:25")]),e._v("\n   200  extern "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"C"')]),e._v(" {\n   201      EMSCRIPTEN_KEEPALIVE\n   202          bool "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-title"}},[e._v("render_frame")])]),e._v("() {\n-> 203              HN::ItemIds toUpdate;\n   204              HN::ItemIds toRefresh;\n   205 \n   206  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("#ifdef __EMSCRIPTEN__")]),e._v("\nTarget 0: (example) stopped.\n(lldb) r\n")])]),t("h2",[t("a",{attrs:{name:"Problem:Seelocalvariables"}}),e._v("Problem: See local variables")]),t("p",[e._v("Use: v to see all variables")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("(lldb) v\n(HN::ItemIds) toUpdate = size=0 {}\n(HN::ItemIds) toRefresh = size=0 {}\n(bool) isActive = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("true")]),e._v("\n(lldb)\n")])]),t("p",[e._v("There are lots of commands under v which you can see by typing "),t("code",{pre:!0},[e._v("help v")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("(lldb) "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("help")]),e._v(" v\n     Show variables "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("for")]),e._v(" the current stack frame. Defaults to all arguments and "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("local")]),e._v(" variables "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("in")]),e._v(" scope. Names of argument, "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("local")]),e._v(", file static and file global\n     variables can be specified. Children of aggregate variables can be specified such as "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'var->child.x'")]),e._v(".  The -> and [] operators "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("in")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'frame variable'")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("do")]),e._v(" not\n     invoke operator overloads "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("if")]),e._v(" they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("command")]),e._v(" to\n     "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("print")]),e._v(" the variable instead.\n     It is worth noting that except "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("for")]),e._v(" overloaded operators, when printing "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("local")]),e._v(" variables "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'expr local_var'")]),e._v(" and "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'frame var local_var'")]),e._v(" produce the same results.\n     However, "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'frame variable'")]),e._v(" is more efficient, since it uses debug information and memory reads directly, rather than parsing and evaluating an expression,\n     "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("which")]),e._v(" may even involve JITing and running code "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("in")]),e._v(" the target program.\n\nSyntax: v <cmd-options> [<variable-name> [<variable-name> [...]]]\n\nCommand Options Usage:\n  v [-AFLORTacglrst] [-y <name>] [-z <name>] [-f <format>] [-G <gdb-format>] [-d <none>] [-S <boolean>] [-D <count>] [-P <count>] [-Y[<count>]] [-V <boolean>] [-Z <count>] [<variable-name> [<variable-name> [...]]]\n\n       -A ( --show-all-children )\n            Ignore the upper bound on the number of children to show.\n\n       -D <count> ( --depth <count> )\n            Set the max recurse depth when dumping aggregate types (default is infinity).\n\n       -F ( --flat )\n")])]),t("p",[e._v("One useful one is to only see variables at a certain depth:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("v -D 1\n")])]),t("h3",[t("a",{attrs:{name:"Printingwithpo"}}),e._v("Printing with po")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("(lldb) v\n(HN::ItemIds) toUpdate = size=0 {}\n(HN::ItemIds) toRefresh = size=0 {}\n(bool) isActive = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("true")]),e._v("\n(lldb) po toUpdate\nsize=0\n\n(lldb) po "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"Hello"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"Hello"')]),e._v("\n")])]),t("h2",[t("a",{attrs:{name:"Problem:Amoreuserfriendlyinterfacegui"}}),e._v("Problem: A more user friendly interface "),t("code",{pre:!0},[e._v("gui")])]),t("p",[e._v("Using gui allows you step through the code and also see things like your local vars at the same time")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("gui\n")])]),t("img",{attrs:{src:"https://i.imgur.com/kJJ2NlC.png"}}),t("p",[e._v("Use tab to switch between source and variables")]),t("h2",[t("a",{attrs:{name:"Problem:IneedmoreinfoVoltron:Viewstackregisters"}}),e._v("Problem: I need more info! (Voltron: View stack, registers)")]),t("p",[e._v("Another useful tool is voltron which can be opened in a different terminal to view other useful information.")]),t("p",[e._v("It will update as you step through lldb so it's nice to have it side by side.")]),t("p",[e._v("You can get info about the disassembly, register vals, stack vals etc")]),t("img",{attrs:{src:"https://i.imgur.com/jKA7CXk.png"}}),t("h2",[t("a",{attrs:{name:"Problem:AccesstoLLDBspythonapi"}}),e._v("Problem: Access to LLDB's python api")]),t("ul",[t("li",[e._v("When inside lldb you can write script to get access to a Python REPL")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("Process 41838 stopped\n* thread "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("#1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1")]),e._v("\n    frame "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("#0: 0x00000001000029cd example`::render_frame() at main.cpp:203:25")]),e._v("\n   200 \textern "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"C"')]),e._v(" {\n   201 \t    EMSCRIPTEN_KEEPALIVE\n   202 \t        bool "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-title"}},[e._v("render_frame")])]),e._v("() {\n-> 203 \t            HN::ItemIds toUpdate;\n   204 \t            HN::ItemIds toRefresh;\n   205\n   206 \t"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("#ifdef __EMSCRIPTEN__")]),e._v("\nTarget 0: (example) stopped.\n(lldb) script\nPython Interactive Interpreter. To "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("exit")]),e._v(", "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("type")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'quit()'")]),e._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'exit()'")]),e._v(" or Ctrl-D.\n>>> lldb\n<module "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'lldb'")]),e._v(" from "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'/Applications/Xcode.app/Contents/SharedFrameworks/LLDB.framework/Resources/Python3/lldb/__init__.py'")]),e._v(">\n>>>\n")])]),t("h2",[t("a",{attrs:{name:"Problem:IwanttouseVSCODEwithlldb"}}),e._v("Problem: I want to use VSCODE with lldb")]),t("ul",[t("li",[t("p",[e._v("Extension: "),t("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb"}},[e._v("https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb")])])]),t("li",[t("p",[e._v("Create a "),t("code",{pre:!0},[e._v(".vscode/launch.json")]),e._v(" file with the following simple config")])])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-json"}},[e._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[e._v('"configurations"')]),e._v(": [\n    {\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[e._v('"name"')]),e._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"Launch Example Debug"')]),e._v(",\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[e._v('"type"')]),e._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"lldb"')]),e._v(",\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[e._v('"request"')]),e._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"launch"')]),e._v(",\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[e._v('"program"')]),e._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"${workspaceFolder}/build/src/example/example"')]),e._v(",\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[e._v('"args"')]),e._v(": [],\n    }\n  ]\n}\n")])]),t("ul",[t("li",[e._v("Setbreak point")]),t("li",[e._v("Run launch debug")])]),t("img",{attrs:{src:"https://i.imgur.com/Fq2xDl5.png"}}),t("h2",[t("a",{attrs:{name:"Links"}}),e._v("Links")]),t("ul",[t("li",[t("a",{attrs:{href:"https://gist.github.com/ryanchang/a2f738f0c3cc6fbd71fa"}},[e._v("LLDB Cheat Sheet")])]),t("li",[t("a",{attrs:{href:"https://lldb.llvm.org/use/tutorial.html"}},[e._v("Official LLDB Tutorial")])]),t("li",[t("a",{attrs:{href:"http://lldb.llvm.org/use/map.html"}},[e._v("GDB -> LLDB Commands")])]),t("li",[t("a",{attrs:{href:"https://github.com/snare/voltron"}},[e._v("Voltron")])]),t("li",[t("a",{attrs:{href:"https://github.com/vim-vdebug/vdebug"}},[e._v("vdebug")])]),t("li",[t("a",{attrs:{href:"https://rr-project.org/"}},[e._v("rr")])]),t("li",[t("a",{attrs:{href:"https://code.visualstudio.com/docs/cpp/lldb-mi"}},[e._v("LLDB + VSCODE")])]),t("li",[t("a",{attrs:{href:"https://github.com/hugsy/gef"}},[e._v("gef")])]),t("li",[t("a",{attrs:{href:"https://lldb.llvm.org/use/python-reference.html"}},[e._v("LLDB Python Reference")])])])])}],n=t("2877"),l={},o=Object(n["a"])(l,a,r,!1,null,null,null);s["default"]=o.exports}}]);