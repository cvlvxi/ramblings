(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d21b8a8"],{bfe3:function(e,s,a){"use strict";a.r(s);var t=function(){var e=this,s=e.$createElement;e._self._c;return e._m(0)},r=[function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("section",[a("ul",[a("li",[a("a",{attrs:{href:"#Problem:Debugging"}},[e._v("Problem: Debugging")])]),a("li",[a("a",{attrs:{href:"#Problem:AddingExternalDependencies"}},[e._v(" Problem: Adding External Dependencies")]),a("ul",[a("li",[a("a",{attrs:{href:"#RealworldExample:"}},[e._v("Real world Example:")])]),a("li",[a("a",{attrs:{href:"#Createcontribimtui.cmake"}},[e._v("Create contrib/imtui.cmake")])]),a("li",[a("a",{attrs:{href:"#Issue:Tryingtoperforminstallstep"}},[e._v("Issue: Trying to perform install step")])]),a("li",[a("a",{attrs:{href:"#Issue:Cantincludeheaderfile"}},[e._v("Issue: Can't include header file")])]),a("li",[a("a",{attrs:{href:"#Solution:Submodules"}},[e._v("Solution: Submodules")])])])]),a("li",[a("a",{attrs:{href:"#Problem:Enablecompile_commands.jsonforintellisense"}},[e._v("Problem: Enable compile_commands.json for intellisense")])]),a("li",[a("a",{attrs:{href:"#Problem:Enable-gsymbolsfordebugging"}},[e._v("Problem: Enable -g symbols for debugging")])]),a("li",[a("a",{attrs:{href:"#Problem:SettingCversioninCMakeLists.txt"}},[e._v("Problem: Setting C++ version in CMakeLists.txt")])]),a("li",[a("a",{attrs:{href:"#Problem:AddinggenericlibslikeCurlwithFindPackage"}},[e._v("Problem: Adding generic libs like Curl with FindPackage")])])]),a("h1",[e._v("Cmake")]),a("p",[e._v("For a little while now, I have been using CMake as a build tool for building C++ programs. My experience with CMake hasn't been a favorable one compared to say, Meson build, which is clearer but has less complexity and ability to do custom things.")]),a("p",[e._v("Since I find myself questioning myself whenever I have to redo a Cmake project I thought it'd be worth encapsulating some of the more common problems here as I way of guiding my future self or anyone who might by chance read this.")]),a("img",{attrs:{src:"https://miro.medium.com/max/3200/1*CZa3OTueADzT1DGb8EYFfQ.png"}}),a("h2",[a("a",{attrs:{name:"Problem:Debugging"}}),e._v("Problem: Debugging")]),a("p",[e._v("You can use "),a("code",{pre:!0},[e._v("message(STATUS something)")]),e._v(" to write something out to stdout when building cmake")]),a("p",[e._v("I use this to checkout the include_dirs that i've set in variables e.g.")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-cmake"}},[a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# IMGUI Include")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("set")]),e._v("(imgui_INCLUDE "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${imtui_DIR}")]),e._v("/third-party/imgui)\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("message")]),e._v("(STATUS "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${imgui_INCLUDE}")]),e._v(")\n")])]),a("h2",[a("a",{attrs:{name:"Problem:AddingExternalDependencies"}}),e._v(" Problem: Adding External Dependencies")]),a("p",[e._v("You have a library you want to include. If the library supplies headerfiles you could just download those and include it as part of your src. However if it it has a CmakeLists.txt in the root. What to do?")]),a("p",[e._v("You can use a "),a("code",{pre:!0},[e._v("ExternalProject")]),e._v(" dependency to: "),a("code",{pre:!0},[e._v("git fetch or download the src")]),e._v(" and it can "),a("code",{pre:!0},[e._v("then build the project giving you the static / dynamic libraries")]),e._v(" that you can link to your executable.")]),a("p",[e._v("Here's an example github project that shows use of this: https://github.com/charlesnicholson/cmake-external-project-test/blob/master/CMakeLists.txt")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-cmake"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("set")]),e._v("(HIDAPI_ROOT "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${CMAKE_BINARY_DIR}")]),e._v("/thirdparty/hidapi)\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("set")]),e._v("(HIDAPI_LIB_DIR "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${HIDAPI_ROOT}")]),e._v("/bin/lib)\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("set")]),e._v("(HIDAPI_INCLUDE_DIR "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${HIDAPI_ROOT}")]),e._v("/bin/"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("include")]),e._v(")\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("include")]),e._v("(ExternalProject)\n\nExternalProject_Add(hidapi_external\n                    PREFIX "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${HIDAPI_ROOT}")]),e._v("\n                    GIT_REPOSITORY "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"https://github.com/signal11/hidapi.git"')]),e._v("\n                    GIT_TAG "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"40cf516139b5b61e30d9403a48db23d8f915f52c"')]),e._v("\n                    UPDATE_COMMAND "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('""')]),e._v("\n                    PATCH_COMMAND "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('""')]),e._v("\n                    BINARY_DIR "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${HIDAPI_ROOT}")]),e._v("/src/hidapi\n                    SOURCE_DIR "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${HIDAPI_ROOT}")]),e._v("/src/hidapi\n                    INSTALL_DIR "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${HIDAPI_ROOT}")]),e._v("/bin\n                    CONFIGURE_COMMAND ./configure --prefix=<INSTALL_DIR>\n                    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("BUILD_COMMAND")]),e._v(" make\n                    BUILD_BYPRODUCTS "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${HIDAPI_LIB_DIR}")]),e._v("/libhidapi.a)\n")])]),a("p",[e._v("It's sets some key variables used in where the src is downloaded to, which git repo, tag etc and configurations as to how it will build which can be customized.")]),a("h3",[a("a",{attrs:{name:"RealworldExample:"}}),e._v("Real world Example:")]),a("p",[e._v("We have this repo: https://github.com/ggerganov/imtui")]),a("p",[e._v("How can we add this to our executable?")]),a("h3",[a("a",{attrs:{name:"Createcontribimtui.cmake"}}),e._v("Create contrib/imtui.cmake")]),a("p",[e._v("With the following")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-cmake"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("set")]),e._v("(imtui_PREFIX "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${CMAKE_BINARY_DIR}")]),e._v("/contrib/imtui-prefix)\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("set")]),e._v("(imtui_DIR "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${imtui_PREFIX}")]),e._v("/src/imtui)\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("set")]),e._v("(imtui_INCLUDE "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${imtui_DIR}")]),e._v("/"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("include")]),e._v(")\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("set")]),e._v("(imtui_SRC "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${imtui_DIR}")]),e._v("/src)\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("set")]),e._v("(imtui_BINARY_DIR "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${imtui_PREFIX}")]),e._v("/bin)\n\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("include")]),e._v("(ExternalProject)\n\nExternalProject_Add(imtui\n    PREFIX "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${imtui_PREFIX}")]),e._v("\n    GIT_REPOSITORY "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"https://github.com/ggerganov/imtui.git"')]),e._v("\n    GIT_TAG        "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"master"')]),e._v("\n    UPDATE_COMMAND "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('""')]),e._v("\n    PATCH_COMMAND "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('""')]),e._v("\n    BINARY_DIR "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${imtui_BINARY_DIR}")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("BUILD_COMMAND")]),e._v(" make\n    INSTALL_COMMAND "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('""')]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v('# CONFIGURE_COMMAND ""')]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# BUILD_COMMAND ${MAKE_COMMAND} lib-static")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("# INSTALL_COMMAND ${MAKE_COMMAND} install prefix=${htslib_INSTALL}")]),e._v("\n    LOG_DOWNLOAD "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("1")]),e._v("\n)\n")])]),a("p",[e._v("Add to root CmakeLists.txt:")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-cmake"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("cmake_minimum_required")]),e._v("(VERSION "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("3.17")]),e._v(")\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("set")]),e._v("(CMAKE_EXPORT_COMPILE_COMMANDS "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("ON")]),e._v(")\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("project")]),e._v("(stonks)\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("include")]),e._v("("),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"./contrib/imtui.cmake"')]),e._v(")\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("message")]),e._v("(STATUS "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${imtui_INCLUDE}")]),e._v(")\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("add_executable")]),e._v("(main src/main.cpp)\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("add_dependencies")]),e._v("(main imtui)\n")])]),a("p",[e._v("Note the following:")]),a("ul",[a("li",[e._v("When we use external depedency we need to declare on the project the dependency see: "),a("code",{pre:!0},[e._v("add_dependencies(main imtui)")])])]),a("h3",[a("a",{attrs:{name:"Issue:Tryingtoperforminstallstep"}}),e._v("Issue: Trying to perform install step")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("[100%] Linking CXX executable ../../bin/hnterm\n[100%] Built target hnterm\n[ 70%] Performing install step "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("for")]),e._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'imtui'")]),e._v("\nmake[3]: *** No rule to make target `install"),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'.  Stop.\nmake[2]: *** [contrib/imtui-prefix/src/imtui-stamp/imtui-install] Error 2\nmake[1]: *** [CMakeFiles/imtui.dir/all] Error 2\n")])])]),a("p",[e._v("In the ExternalProject config add")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-cmake"}},[e._v("    INSTALL_COMMAND "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('""')]),e._v(" \n")])]),a("p",[e._v("Empty denoted it will not do anything")]),a("h3",[a("a",{attrs:{name:"Issue:Cantincludeheaderfile"}}),e._v("Issue: Can't include header file")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e._v("Scanning dependencies of target main\n[ 90%] Building CXX object CMakeFiles/main.dir/src/main.cpp.o\n/path/to/src/main.cpp:2:10: fatal error: "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'imtui/imtui.h'")]),e._v(" file not found\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v('#include "imtui/imtui.h"')]),e._v("\n         ^~~~~~~~~~~~~~~\n1 error generated.\nmake[3]: *** [CMakeFiles/main.dir/src/main.cpp.o] Error 1\nmake[2]: *** [CMakeFiles/main.dir/all] Error 2\nmake[1]: *** [all] Error 2\nmake: *** [cmakebuild] Error 2\n")])]),a("p",[e._v("See: "),a("a",{attrs:{href:"https://stackoverflow.com/questions/13703647/how-to-properly-add-include-directories-with-cmake"}},[e._v("https://stackoverflow.com/questions/13703647/how-to-properly-add-include-directories-with-cmake")])]),a("p",[e._v("However the solution is to use "),a("code",{pre:!0},[e._v("target_include_directories")]),e._v(" or "),a("code",{pre:!0},[e._v("include_directories")]),e._v(" to add the -I param when compiling.")]),a("p",[e._v("Thus I use: "),a("code",{pre:!0},[e._v("target_include_directories(main PRIVATE ${imtui_INCLUDE})")])]),a("p",[e._v("Some includes may be nested as dependencies in your dependencies. So recommend you find those header files and set them as variables and do the target_include_directory strategy")]),a("h3",[a("a",{attrs:{name:"Solution:Submodules"}}),e._v("Solution: Submodules")]),a("ul",[a("li",[a("p",[e._v("There seems to be a difference between adding a ExternalDependency and using git submodules and using "),a("code",{pre:!0},[e._v("add_subdirectory")]),e._v(".")])]),a("li",[a("p",[e._v("Instead I added imtui via git submodule add [imtui github]")])])]),a("p",[e._v("CMakeLists")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-cmake"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("cmake_minimum_required")]),e._v("(VERSION "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("3.17")]),e._v(")\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("set")]),e._v("(CMAKE_EXPORT_COMPILE_COMMANDS "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("ON")]),e._v(")\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("project")]),e._v("(stonks)\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("add_subdirectory")]),e._v("("),a("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"./thirdparty/imtui"')]),e._v(")\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("add_executable")]),e._v("(main src/main.cpp  src/demo.cpp src/demo.h)\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("target_link_libraries")]),e._v("(main PRIVATE imtui-ncurses)\n")])]),a("p",[e._v("Inside one of the git module's CMakeLists define the library imtui-ncursees which has all of the target_include_directories and relevant stuff which can be linked against main")]),a("h2",[a("a",{attrs:{name:"Problem:Enablecompile_commands.jsonforintellisense"}}),e._v("Problem: Enable compile_commands.json for intellisense")]),a("p",[e._v("Static analyzers such as clangd can be used in IDEs or editors like vscode. cmake will generate this by adding the following in your CMakeLists.txt root")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-cmake"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("set")]),e._v("(CMAKE_EXPORT_COMPILE_COMMANDS "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("ON")]),e._v(")\n")])]),a("p",[e._v("I'm running a custom makefile to add the compile_commands.json in the root dir")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-makefile"}},[e._v("BUILD_DIR=build\n\n"),a("span",{pre:!0,attrs:{class:"hljs-section"}},[e._v("all: link_build")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-section"}},[e._v("cmakebuild: ")]),e._v("\n\t(cd "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("$(BUILD_DIR)")]),e._v("; cmake ..; make)\n\n"),a("span",{pre:!0,attrs:{class:"hljs-section"}},[e._v("link_build: cmakebuild")]),e._v("\n\t((rm compile_commands.json 2> /dev/null || true) && ln -s "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("$(BUILD_DIR)")]),e._v("/compile_commands.json compile_commands.json)\n\n"),a("span",{pre:!0,attrs:{class:"hljs-section"}},[e._v("makebuilddir:")]),e._v("\n\tmkdir -p "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("$(BUILD)")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-section"}},[e._v("clean:")]),e._v("\n\trm -rf "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("$(BUILD)")]),e._v("\n")])]),a("h2",[a("a",{attrs:{name:"Problem:Enable-gsymbolsfordebugging"}}),e._v("Problem: Enable -g symbols for debugging")]),a("p",[e._v("Add the following to your CMakeLists.txt")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-cmake"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("set")]),e._v("(CMAKE_BUILD_TYPE Debug)\n")])]),a("h2",[a("a",{attrs:{name:"Problem:SettingCversioninCMakeLists.txt"}}),e._v("Problem: Setting C++ version in CMakeLists.txt")]),a("p",[e._v("Set the following")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-cmake"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("set")]),e._v(" (CMAKE_CXX_STANDARD "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("11")]),e._v(")\n")])]),a("p",[e._v("Where 11 is C++ 11")]),a("h2",[a("a",{attrs:{name:"Problem:AddinggenericlibslikeCurlwithFindPackage"}}),e._v("Problem: Adding generic libs like Curl with FindPackage")]),a("p",[e._v("See how it enabled "),a("code",{pre:!0},[e._v("CURL_LIBRARIES")]),e._v(" and "),a("code",{pre:!0},[e._v("CURL_INCLUDE_DIR")]),e._v(" after we did find_package.")]),a("p",[e._v("This is an example of the magic of CMake which is "),a("code",{pre:!0},[e._v("not")]),e._v(" awesome")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-cmake"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("find_package")]),e._v("(CURL REQUIRED)\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("add_executable")]),e._v("(example\n    main.cpp\n    hn-state.cpp\n    hn-state.h\n    demo.cpp\n    demo.h\n    impl-ncurses.cpp\n)\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("target_link_libraries")]),e._v("(example PRIVATE imtui-ncurses "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${CURL_LIBRARIES}")]),e._v(")\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("target_include_directories")]),e._v("(example PRIVATE "),a("span",{pre:!0,attrs:{class:"hljs-variable"}},[e._v("${CURL_INCLUDE_DIR}")]),e._v(")\n")])]),a("h2",[e._v("Problem: Configure / Copy "),a("code",{pre:!0},[e._v("other")]),e._v(" files with your build")]),a("p",[e._v("I have some files e.g. "),a("code",{pre:!0},[e._v("index.html")]),e._v(" that needs to be shipped and configured with my build.")]),a("ul",[a("li",[e._v("https://cliutils.gitlab.io/modern-cmake/chapters/basics/comms.html")]),a("li",[e._v("https://cmake.org/cmake/help/latest/command/configure_file.html")])]),a("p",[e._v("See here:")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":""}},[e._v("add_executable(example main.cpp)\nconfigure_file(index.html ${CMAKE_CURRENT_BINARY_DIR}/index.html)\n")])]),a("p",[e._v("This will copy the index.html file into the build dir")]),a("h3",[e._v("Issue: How tdo I get access to the Output binary dir?")]),a("ul",[a("li",[e._v("Use "),a("code",{pre:!0},[e._v("${CMAKE_CURRENT_BINARY_DIR}")])])]),a("h1",[e._v("Links")]),a("ul",[a("li",[a("a",{attrs:{href:"https://cliutils.gitlab.io/modern-cmake/"}},[e._v("Modern Cmake")])]),a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=QjFpKJ8Xx78"}},[e._v("Advanced Levelization Techniques p 1")])]),a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=eC9-iRN2b04"}},[e._v("Using modern cmake patterns to enforce good modular design")])]),a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=bsXLMQ6WgIk"}},[e._v("Effective CMake")])])])])}],n=a("2877"),i={},l=Object(n["a"])(i,t,r,!1,null,null,null);s["default"]=l.exports}}]);